---
###############################################################################
# Jellyseerr Config
###############################################################################
#
# Configuration:
# * service: jellyseerr.conf
# * application: config/settings.json
# * db: config/db/db.sqlite3
# * update check: committag.json
#
# Users are managed via the REST API after the service is running. Database is
# automatically migrated to a updated installation if enabled.
#
# Reference:
# * https://docs.jellyseerr.dev/getting-started/buildfromsource
# * https://api-docs.jellyseerr.dev/

- name: 'Install | {{ jellyseerr_role_etc_dir }}'
  ansible.builtin.file:
    path: '{{ jellyseerr_role_etc_dir }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
    state: 'directory'

- name: 'Config | set service options'
  ansible.builtin.template:
    src: 'jellyseerr.conf.j2'
    dest: '{{ jellyseerr_role_service_cfg }}'
    owner: '{{ _jellyseerr_srv_user.role_uid }}'
    group: '{{ _jellyseerr_srv_group.role_gid }}'
    mode: '0640'

- name: 'Config | set Jellyseerr config'
  ansible.builtin.template:
    src: 'settings.json.j2'
    dest: '{{ jellyseerr_role_settings_cfg }}'
    owner: '{{ _jellyseerr_srv_user.role_uid }}'
    group: '{{ _jellyseerr_srv_group.role_gid }}'
    mode: '0640'

- name: 'Config | secure config directories'
  ansible.builtin.file:
    path: '{{ jellyseerr_role_config_dir }}'
    owner: '{{ _jellyseerr_srv_user.role_uid }}'
    group: '{{ _jellyseerr_srv_group.role_gid }}'
    mode: 'o-rwx'
    recurse: true
    state: 'directory'

- name: 'Config | set CA file'
  when: _jellyseerr_db_ssl_ca_file.raw | length > 0
  ansible.builtin.copy:
    src: '{{ _jellyseerr_db_ssl_ca_file.raw }}'
    dest: '{{ _jellyseerr_db_ssl_ca_file.role_dest }}'
    owner: '{{ _jellyseerr_srv_user.role_uid }}'
    group: '{{ _jellyseerr_srv_group.role_gid }}'
    mode: '{{ _jellyseerr_db_ssl_ca_file.role_perms }}'
    force: true

- name: 'Config | reset CA file'
  when: _jellyseerr_db_ssl_ca_file.raw | length == 0
  ansible.builtin.file:
    path: '{{ _jellyseerr_db_ssl_ca_file.role_dest }}'
    state: 'absent'

- name: 'Config | set private key file'
  when: _jellyseerr_db_ssl_key_file.raw | length > 0
  ansible.builtin.copy:
    src: '{{ _jellyseerr_db_ssl_key_file.raw }}'
    dest: '{{ _jellyseerr_db_ssl_key_file.role_dest }}'
    owner: '{{ _jellyseerr_srv_user.role_uid }}'
    group: '{{ _jellyseerr_srv_group.role_gid }}'
    mode: '{{ _jellyseerr_db_ssl_key_file.role_perms }}'
    force: true

- name: 'Config | reset private key file'
  when: _jellyseerr_db_ssl_key_file.raw | length == 0
  ansible.builtin.file:
    path: '{{ _jellyseerr_db_ssl_key_file.role_dest }}'
    state: 'absent'

- name: 'Config | set certificate chain file'
  when: _jellyseerr_db_ssl_cert_file.raw | length > 0
  ansible.builtin.copy:
    src: '{{ _jellyseerr_db_ssl_cert_file.raw }}'
    dest: '{{ _jellyseerr_db_ssl_cert_file.role_dest }}'
    owner: '{{ _jellyseerr_srv_user.role_uid }}'
    group: '{{ _jellyseerr_srv_group.role_gid }}'
    mode: '{{ _jellyseerr_db_ssl_cert_file.role_perms }}'
    force: true

- name: 'Config | reset certificate chain file'
  when: _jellyseerr_db_ssl_cert_file.raw | length == 0
  ansible.builtin.file:
    path: '{{ _jellyseerr_db_ssl_cert_file.role_dest }}'
    state: 'absent'

- name: 'Config | resolve node location'
  ansible.builtin.shell:
    source {{ _jellyseerr.nvm_env }} &&
    which node
  args:
    executable: '/bin/bash'
  changed_when: false
  become: true
  become_user: '{{ _jellyseerr_srv_user.raw }}'
  register: _jellyseerr_node_path

- name: 'Config | Jellyseerr service'
  ansible.builtin.include_role:
    name: 'r_pufky.deb.systemd'
  vars:
    systemd_daemon_reload_enable: true
    systemd_services:
      - name: 'jellyseerr'
        state: 'present'
        drop_in: false
        unit:
          description: 'Jellyseerr Daemon'
          wants:
            - 'network.target'
          after:
            - 'network.target'
        service:
          type: 'exec'
          exec_start:
            - '{{ _jellyseerr_node_path.stdout }} dist/index.js'
          timeout_stop_sec: 20
          restart: 'always'  # Always restart for periodic service restarts.
          runtime_max_sec: '{{
              "1d"
              if _jellyseerr_srv_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          environment:
            - var: 'NODE_ENV'
              value: 'production'
          environment_file:
            - '{{ jellyseerr_role_service_cfg }}'
          working_directory: '{{ jellyseerr_role_opt_dir }}'
          user: '{{ _jellyseerr_srv_user.raw }}'
          group: '{{ _jellyseerr_srv_group.raw }}'
          u_mask: '{{ _jellyseerr_srv_u_mask.raw }}'
        kill:
          kill_mode: 'process'
        install:
          wanted_by:
            - 'multi-user.target'

# Local user management requires service running or running 'install' state.
- name: 'Config | start services'
  ansible.builtin.systemd:
    name: '{{ item }}'
    enabled: true
    daemon_reload: true
    state: 'started'
  failed_when: false
  loop:
    - 'jellyseerr.service'

- name: 'Config | start services'
  ansible.builtin.meta: 'flush_handlers'
