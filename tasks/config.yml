---
###############################################################################
# Overseerr Config
###############################################################################
# Overseerr is installed from source. Create systemd service and reload daemons,
# create required directories, certificates, set config, and start service.
# Service may not exist if first install.
#
# Configuration:
# * service: overseerr.conf
# * application: config/settings.json
# * db: config/db/db.sqlite3
# * update check: committag.json
#
# Users are managed via the REST API after the service is running. Database is
# automatically migrated to a updated installation if enabled.
#
# Args:
#   _overseerr_uid: int - overseerr user UID.
#   _overseerr_gid: int - overseerr user GID.
#
# Reference:
# * https://api-docs.overseerr.dev/

- name: 'Config | Overseerr service'
  ansible.builtin.include_role:
    name: 'r_pufky.deb.systemd'
  vars:
    systemd_daemon_reload_enable: true
    systemd_services:
      - name: 'overseerr'
        state: 'present'
        drop_in: false
        unit:
          description: 'Overseerr Daemon'
          wants:
            - 'network.target'
          after:
            - 'syslog.target'
            - 'network.target'
        service:
          type: 'exec'
          exec_start:
            - '/usr/bin/node {{ overseerr_role_run_dir }}/dist/index.js'
          timeout_stop_sec: 20
          restart: 'always'  # always restart for periodic service restarts
          runtime_max_sec: '{{
              "1d"
              if overseerr_service_restart_daily_enable else
              "infinity"
            }}'
        exec:
          environment:
            - var: 'NODE_ENV'
              value: 'production'
          environment_file: ['{{ overseerr_role_run_dir }}/overseerr.conf']
          working_directory: '{{ overseerr_role_run_dir }}'
          user: '{{ overseerr_user }}'
          group: '{{ overseerr_group }}'
          u_mask: '{{ overseerr_service_u_mask }}'
        kill:
          kill_mode: 'process'
        install:
          wanted_by:
            - 'multi-user.target'

- name: 'Config | set service config'
  notify: 'Handlers | restart overseerr'
  ansible.builtin.template:
    src: 'overseerr.conf.j2'
    dest: '{{ overseerr_role_run_dir }}/overseerr.conf'
    owner: '{{ _overseerr_uid }}'
    group: '{{ _overseerr_gid }}'
    mode: '0644'

- name: 'Config | set config ownership'
  ansible.builtin.include_role:
    name: 'r_pufky.lib.utils'
    tasks_from: 'remote_file.yml'
  vars:
    file_path: '{{ overseerr_role_run_dir }}/config'
    file_owner: '{{ _overseerr_uid }}'
    file_group: '{{ _overseerr_gid }}'
    file_mode: 'o-rwx'
    file_recurse: true
    file_state: 'directory'

- name: 'Config | set settings.json'
  notify: 'Handlers | restart overseerr'
  ansible.builtin.template:
    src: 'settings.json.j2'
    dest: '{{ overseerr_role_run_dir }}/config/settings.json'
    owner: '{{ _overseerr_uid }}'
    group: '{{ _overseerr_gid }}'
    mode: '0640'

# Explicitly start overseerr to create DB on first run.
- name: 'Config | start Overseerr'
  ansible.builtin.systemd:
    name: 'overseerr'
    enabled: true
    daemon_reload: true
    state: 'started'

- name: 'Config | DB add user'
  when: overseerr_users | length > 0
  ansible.builtin.include_tasks: db_add_user.yml
  vars:
    user: '{{ users }}'
    settings: '{{ users["settings"] | default({}) }}'
  loop: '{{ overseerr_users }}'
  loop_control:
    loop_var: 'users'
    label: '{{ users.email }}'
